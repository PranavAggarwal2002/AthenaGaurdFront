/**
 * Export valuation results to CSV format
 * Used for Central Govt Bonds, State Govt Bonds, and Equity Shares
 * Frontend-only utility â€” no backend logic
 *
 * @param {Object} processedData - Final processed mismatch data received from backend
 * @param {string} filename - Optional base filename (default: 'Valuation_Report')
 */
export const exportValuationToCSV = (processedData, filename = 'Valuation_Report') => {
    if (!processedData || Object.keys(processedData).length === 0) {
        alert('No data available to export.');
        return;
    }

    const rows = [];

    // Define common CSV headers
    const headers = ['Section', 'ISIN', 'FIMMDA Price', 'Market Price', 'Difference'];
    rows.push(headers.join(','));

    // Loop over each instrument type section
    Object.entries(processedData).forEach(([category, items]) => {
        let marketPriceLabel = '';

        // Determine which market price key to extract based on section
        switch (category) {
            case 'Central Govt Bonds':
                marketPriceLabel = 'actualMarketPrice';
                break;
            case 'State Govt Bonds':
                marketPriceLabel = 'sdlPrice';
                break;
            case 'Equity shares':
                marketPriceLabel = 'nsePrice';
                break;
            default:
                marketPriceLabel = 'actualMarketPrice'; // fallback to avoid crash
        }

        // Generate rows for each instrument in the section
        items.forEach(item => {
            const row = [
                escapeCSV(category),                             // Section name
                escapeCSV(item.isin),                            // ISIN
                formatNumber(item.fimmdaPrice),                  // FIMMDA Price
                formatNumber(item[marketPriceLabel]),            // Market Price
                formatNumber(item.difference)                    // Difference
            ];
            rows.push(row.join(','));
        });
    });

    // Convert all rows to single CSV string
    const csvContent = rows.join('\n');

    // Trigger CSV file download in browser
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement('a');

    link.href = url;
    link.download = `${filename}_${new Date().toISOString().split('T')[0]}.csv`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    window.URL.revokeObjectURL(url);
};
